from typing import List
from pydantic import BaseModel
import enum

class LearningStyleType(str, enum.Enum):
    VISUAL = "visual"
    AUDITORY = "auditory"
    READING_WRITING = "reading_writing"
    KINESTHETIC = "kinesthetic"

class Trend(str, enum.Enum):
    STABLE = 'stable'
    IMPROVING = 'improving'
    DECLINING = 'declining'

class LearningStyleResult(BaseModel):
    """VARK assessment outcome"""
    style: LearningStyleType
    description: str  # Generated by Gemini explaining the style

class SubjectType(str, enum.Enum):
    MATH = "math"
    SCIENCE = "science"
    ENGLISH = 'english'
    SST = 'social-science'
    HINDI = 'hindi'

class VARKQuestionSchema(BaseModel):
    question: str
    options: list[str]

class PastScoresModel(BaseModel):
    """Model for returning past scores"""
    subject: SubjectType
    scores: list[ int]

class PastScoresModel(BaseModel):
    """Model for taking past 10 scores"""
    subject: SubjectType
    scores: List[int]

class PerformanceLevel(str, enum.Enum):
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"

class AssessmentResult(BaseModel):
    subject: SubjectType
    performance_level: PerformanceLevel
    average_score: float
    trend: Trend