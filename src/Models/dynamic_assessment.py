from enum import Enum
from typing import List, Optional, Union
from pydantic import BaseModel, Field

from src.Models.static_assessment import LearningStyleType

class QuestionSchema(BaseModel):
    """Adaptive quiz question structure"""
    text: str
    options: list[str]
    style_hint: LearningStyleType  # Which style this question targets

class QuizSubmission(BaseModel):
    """User answers in {question_id: response_index} format"""
    responses: list[int]  # {"1": 0, "2": 3, ...}

class LearningStyleResult(BaseModel):
    """VARK assessment outcome"""
    style: LearningStyleType
    description: str  # Generated by Gemini explaining the style

class AdaptiveQuizResponse(BaseModel):
    """Generated quiz package"""
    questions: list[QuestionSchema]
    estimated_duration: int  # Based on teacher's pace settings
    difficulty_level: str

class QuizType(str, Enum):
    MULTIPLE_CHOICE = "multiple_choice"
    TRUE_FALSE = "true_false"
    SHORT_ANSWER = "short_answer"
    MATCHING = "matching"

class DifficultyLevel(str, Enum):
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"

class Question(BaseModel):
    question_text: str
    options: List[str] = Field(..., min_items=2)
    correct_answer_index: int
    explanation: Optional[str] = None
    learning_style: Optional[LearningStyleType] = None
    difficulty: Optional[DifficultyLevel] = None

class Quiz(BaseModel):
    title: str = Field(..., min_length=5, max_length=255)
    description: Optional[str] = None
    quiz_type: QuizType
    questions: List[Question] = Field(..., min_items=1)
    target_learning_style: Optional[LearningStyleType] = None
    difficulty_level: Optional[DifficultyLevel] = None
    estimated_time_minutes: Optional[int] = Field(None, gt=0)
    tags: List[str] = Field(default_factory=list)
    class Config:
        json_schema_extra = {
            "example": {
                "title": "Basic Python Concepts",
                "description": "Quiz covering fundamental Python programming concepts",
                "quiz_type": "multiple_choice",
                "target_learning_style": "read_write",
                "difficulty_level": "beginner",
                "estimated_time_minutes": 15,
                "tags": ["programming", "python", "basics"],
                "questions": [
                    {
                        "question_text": "What is the output of 'print(3 + 4 * 2)'?",
                        "options": ["11", "14", "10", "7"],
                        "correct_answer_index": 0,
                        "explanation": "Operator precedence: multiplication happens first",
                        "learning_style": "read_write",
                        "difficulty": "beginner"
                    }
                ]
            }
        }

class VARKQuestion(BaseModel):
    qid : int
    question:str
    options:List[str]

class QuizQuestion(BaseModel):
    qid : int
    question : str
    options : List[str]
    correct_option : int
    answer: str
    explanation: str

class QuizResponseModel(BaseModel):
    """Generated quiz response"""
    question_count: int
    questions: Union[List[VARKQuestion], List[QuizQuestion]]